{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment",

  "Mappings" : {
    "VpcCidrs" : {
      "eu-central-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "sa-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-northeast-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "eu-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-west-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-southeast-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-southeast-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" }
    }

  },

  "Parameters" : {
    "EcsAmiId" : {
      "Type" : "String",
      "Description" : "ECS AMI Id"
    },

    "EcsInstanceType" : {
      "Type" : "String",
      "Description" : "ECS EC2 instance type",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Type" : "String",
      "Description" : "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Default" : ""
    },

    "VpcId" : {
      "Type" : "String",
      "Description" : "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Default" : "",
      "AllowedPattern" : "^(?:vpc-[0-9a-f]{8}|)$",
      "ConstraintDescription" : "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created"
    },

    "SubnetIds" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Optional - Comma separated list of existing VPC Subnet Ids where ECS instances will run",
      "Default" : ""
    },

    "AsgMaxSize" : {
      "Type" : "Number",
      "Description" : "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Default" : "1"
    },

    "AsgDesiredSize" : {
      "Type" : "Number",
      "Description" : "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Default" : "1"
    },

    "IamRoleInstanceProfile" : {
      "Type" : "String",
      "Description" : "Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance"
    },

    "EcsClusterName" : {
      "Type" : "String",
      "Description" : "ECS Cluster Name",
      "Default" : "default"
    },

    "EcsPort" : {
      "Type" : "String",
      "Description" : "Optional - Security Group port to open on ECS instances - defaults to port 80",
      "Default" : "8082"
    },

    "ElbPort" : {
      "Type" : "String",
      "Description" : "Optional - Security Group port to open on ELB - port 80 will be open by default",
      "Default" : "80"
    },

    "ElbProtocol" : {
      "Type" : "String",
      "Description" : "Optional - ELB Protocol - defaults to HTTP",
      "Default" : "HTTP"
    },

    "ElbHealthCheckTarget" : {
      "Type" : "String",
      "Description" : "Optional - Health Check Target for ELB - defaults to HTTP:80/",
      "Default" : "HTTP:80/"
    },

    "SourceCidr" : {
      "Type" : "String",
      "Description" : "Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0",
      "Default" : "0.0.0.0/0"
    },

    "EcsEndpoint" : {
      "Type" : "String",
      "Description" : "Optional : ECS Endpoint for the ECS Agent to connect to",
      "Default" : ""
    },

    "CreateApplicationLoadBalancer" : {
      "Type" : "String",
      "Description" : "Optional : When set to true, creates a ALB for ECS Service",
      "Default" : "false"
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Optional : Comma-delimited list of two VPC availability zones in which to create subnets",
      "Default" : ""
    }
  },

  "Conditions" : {
    "CreateVpcResources" : { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] },
    "ExistingVpcResources" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] } ] },
    "SetEndpointToECSAgent" : { "Fn::Not" : [ {
      "Fn::Equals" : [ { "Ref" : "EcsEndpoint" }, "" ]
    } ] },
    "CreateELBForExistingVpc" : { "Fn::And" : [
      { "Fn::Equals" : [ { "Ref" : "CreateApplicationLoadBalancer" }, "true" ] },
      { "Condition" : "ExistingVpcResources" }
    ] },
    "CreateELBForNewVpc" : { "Fn::And" : [
      { "Fn::Equals" : [ { "Ref" : "CreateApplicationLoadBalancer" }, "true" ] },
      { "Condition" : "CreateVpcResources" }
    ] },
    "CreateELB" : { "Fn::Or": [ { "Condition" : "CreateELBForExistingVpc" }, { "Condition" : "CreateELBForNewVpc" } ] },
    "CreateEC2LCWithKeyPair" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KeyName" }, "" ] } ] },
    "CreateEC2LCWithoutKeyPair" : { "Fn::Equals" : [ { "Ref" : "KeyName" }, "" ] },
    "UseSpecifiedVpcAvailabilityZones" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Fn::Join" : [ "", { "Ref" : "VpcAvailabilityZones" } ] }, "" ] } ] }
  },

  "Resources" : {

    "Vpc" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true"
      }
    },

    "PubSubnetAz1" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : {
          "Fn::If" : [
            "UseSpecifiedVpcAvailabilityZones",
            { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
            { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }
          ]
        }
      }
    },

    "PubSubnetAz2" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : {
          "Fn::If" : [
            "UseSpecifiedVpcAvailabilityZones",
            { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
            { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }
          ]
        }
      }
    },

    "InternetGateway" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::InternetGateway"
    },

    "AttachGateway" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "ElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ELB Allowed Ports",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "Vpc" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "ElbPort" }, "ToPort" : { "Ref" : "ElbPort" },
            "CidrIp" : { "Ref" : "SourceCidr" } }
        ]
      }
    },

    "EcsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ECS Allowed Ports",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "Vpc" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress" : { "Fn::If" : [ "CreateELB",
          [
            { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "EcsPort" }, "ToPort" : { "Ref" : "EcsPort" },
              "CidrIp" : { "Ref" : "SourceCidr" } },
            { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "SourceSecurityGroupId" :  { "Ref" : "ElbSecurityGroup" } }
          ],
          [
            { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "EcsPort" }, "ToPort" : { "Ref" : "EcsPort" },
              "CidrIp" : { "Ref" : "SourceCidr" } }
          ]
        ] }
      }
    },

    "EcsApplicationLoadBalancer" : {
      "Condition" : "CreateELBForNewVpc",
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Scheme": "Internet-facing",
        "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ]
      }
    },

    "EcsApplicationLoadBalancerExistingVpc" : {
      "Condition" : "CreateELBForExistingVpc",
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Scheme": "Internet-facing",
        "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
        "Subnets" : { "Ref" : "SubnetIds" }
      }
    },

    "EcsInstanceLc" : {
      "Condition" : "CreateEC2LCWithKeyPair",
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Ref" : "EcsAmiId" },
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "AssociatePublicIpAddress" : true,
        "IamInstanceProfile": { "Ref": "IamRoleInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" } ],
        "UserData" : { "Fn::If" : [
          "SetEndpointToECSAgent" ,
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config",
            "\necho ECS_BACKEND_HOST=", { "Ref" : "EcsEndpoint" }, " >> /etc/ecs/ecs.config"
          ] ] } },
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config"
          ] ] } }
        ] }
      }
    },

    "EcsInstanceLcWithoutKeyPair" : {
      "Condition" : "CreateEC2LCWithoutKeyPair",
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Ref" : "EcsAmiId" },
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "AssociatePublicIpAddress" : true,
        "IamInstanceProfile": { "Ref": "IamRoleInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" } ],
        "UserData" : { "Fn::If" : [
          "SetEndpointToECSAgent" ,
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config",
            "\necho ECS_BACKEND_HOST=", { "Ref" : "EcsEndpoint" }, " >> /etc/ecs/ecs.config"
          ] ] } },
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config"
          ] ] } }
        ] }
      }
    },

    "EcsInstanceAsg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Fn::If" : [ "CreateVpcResources", [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ], { "Ref" : "SubnetIds" } ] },
        "LaunchConfigurationName" : { "Fn::If" : [ "CreateEC2LCWithKeyPair", { "Ref" : "EcsInstanceLc" }, { "Ref" : "EcsInstanceLcWithoutKeyPair" } ] },
        "MinSize" : "1",
        "MaxSize" : { "Ref" : "AsgMaxSize" },
        "DesiredCapacity" : { "Ref" : "AsgDesiredSize" },
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : ["", [ "ECS Instance - ", { "Ref" : "AWS::StackName" } ] ] }, "PropagateAtLaunch" : "true" } ]
      }
    },
    "ECSCluster": {
      "Type" : "AWS::ECS::Cluster",
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "EcsInstanceLcWithoutKeyPair",
        "EcsInstanceAsg"
      ],
      "Properties" : {
        "ClusterName" : { "Ref": "EcsClusterName" }
      }
    },
    "taskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family" : "vehicleinventorytask",
        "ContainerDefinitions": [
          {
            "Name": "vehicleinventorycontainer",
            "Cpu": "512",
            "Essential": "true",
            "Image": "140951757052.dkr.ecr.us-west-1.amazonaws.com/vehicleinventoryservice:latest",
            "Memory": "1024",
            "PortMappings": [
              {
                "HostPort": 8082,
                "ContainerPort": 8082
              }
            ]
          }
         ],
        "Volumes": [
          {
            "Name": "my-vol"
          }
        ]
      }
    },
    "service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": "1",
        "TaskDefinition": {
          "Ref": "taskdefinition"
        }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs" : {
    "EcsInstanceAsgName" : {
      "Description" : "Auto Scaling Group Name for ECS Instances",
      "Value" : { "Ref" : "EcsInstanceAsg" }
    },
    "ecscluster": {
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "taskdef": {
      "Value": {
        "Ref": "taskdefinition"
      }
    },
    "ecsservice": {
      "Value": {
        "Ref": "service"
      }
    },
    "EcsAlbName" : {
      "Description" : "Load Balancer for ECS Service",
      "Value" : { "Fn::If" : [ "CreateELB",
        { "Fn::If" : [ "CreateELBForNewVpc", { "Ref" : "EcsApplicationLoadBalancer" }, { "Ref" : "EcsApplicationLoadBalancerExistingVpc" } ] },
        ""
      ] }
    }

  }
}
